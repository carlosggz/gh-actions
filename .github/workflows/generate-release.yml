name: Generate release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Update release
        id: update_release
        run: |
          source ./scripts/functions.sh
          CURRENT_VERSION=$(get_version)
          NEW_VERSION=$(increment_version "${CURRENT_VERSION}")
          sed -i -e "s/${CURRENT_VERSION}/${NEW_VERSION}/g" ./build.gradle
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Generate bootJar
        run: ./gradlew assemble

      - name: Publish to GitHub Packages
        run: ./gradlew publish
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#      - name: Generate artifact attestation
#        uses: actions/attest-build-provenance@v2
#        with:
#          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
#          subject-digest: ${{ steps.push.outputs.digest }}
#          push-to-registry: true

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.update_release.outputs.current_version }}
          name: Release ${{ steps.update_release.outputs.current_version }}
          body: New release ${{ steps.update_release.outputs.current_version }} details
          draft: false
          prerelease: false

      - name: Update version and push to repository
        run: |
          git config --global user.name 'Automatic Release'
          git config --global user.email 'automatic-release@users.noreply.github.com'
          source ./scripts/functions.sh
          CURRENT_VERSION=$(get_version)
          git commit -m "Generated release ${CURRENT_VERSION}"
          NEW_VERSION="${CURRENT_VERSION}-SNAPSHOT"
          sed -i -e "s/${CURRENT_VERSION}/${NEW_VERSION}/g" ./build.gradle
          git commit -m "Generated version ${NEW_VERSION}"
          git push
